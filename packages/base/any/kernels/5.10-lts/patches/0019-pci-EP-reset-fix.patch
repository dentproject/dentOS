From 432cb2cf3d7e1f571d3387649427a2769f2a05d4 Mon Sep 17 00:00:00 2001
From: Gil Tabibian <gilt@marvell.com>
Date: Tue, 7 Jul 2020 14:16:32 +0300
Subject: [PATCH] pci EP reset fix

Provided by Marvell IPBU team, ported from LK4.14 branch.
Resolves disconnect/connect of CPU PCI interface in RC mode.

---
 arch/arm64/boot/dts/marvell/armada-cp11x.dtsi |   9 +
 drivers/pci/controller/dwc/pcie-armada8k.c    | 357 +++++++++++++-----
 2 files changed, 269 insertions(+), 97 deletions(-)
 mode change 100644 => 100755 arch/arm64/boot/dts/marvell/armada-cp11x.dtsi
 mode change 100644 => 100755 drivers/pci/controller/dwc/pcie-armada8k.c

diff --git a/arch/arm64/boot/dts/marvell/armada-cp11x.dtsi b/arch/arm64/boot/dts/marvell/armada-cp11x.dtsi
old mode 100644
new mode 100755
index 9dcf16bea..819ccf56b
--- a/arch/arm64/boot/dts/marvell/armada-cp11x.dtsi
+++ b/arch/arm64/boot/dts/marvell/armada-cp11x.dtsi
@@ -12,6 +12,9 @@
 
 #define CP11X_PCIEx_CONF_BASE(iface)	(CP11X_PCIEx_MEM_BASE(iface) + CP11X_PCIEx_MEM_SIZE(iface))
 
+#define CP110_PCIEx_MAC_RESET_BIT_MASK(n)	\
+					(0x1 << 11 + ((n + 2) % 3))
+
 / {
 	/*
 	 * The contents of the node are defined below, in order to
@@ -513,6 +516,8 @@
 		num-lanes = <1>;
 		clock-names = "core", "reg";
 		clocks = <&CP11X_LABEL(clk) 1 13>, <&CP11X_LABEL(clk) 1 14>;
+		marvell,system-controller = <&CP11X_LABEL(syscon0)>;
+		mac-reset-bit-mask = <CP110_PCIEx_MAC_RESET_BIT_MASK(0)>;
 		status = "disabled";
 	};
 
@@ -538,6 +543,8 @@
 		num-lanes = <1>;
 		clock-names = "core", "reg";
 		clocks = <&CP11X_LABEL(clk) 1 11>, <&CP11X_LABEL(clk) 1 14>;
+		marvell,system-controller = <&CP11X_LABEL(syscon0)>;
+		mac-reset-bit-mask = <CP110_PCIEx_MAC_RESET_BIT_MASK(1)>;
 		status = "disabled";
 	};
 
@@ -563,6 +570,8 @@
 		num-lanes = <1>;
 		clock-names = "core", "reg";
 		clocks = <&CP11X_LABEL(clk) 1 12>, <&CP11X_LABEL(clk) 1 14>;
+		marvell,system-controller = <&CP11X_LABEL(syscon0)>;
+		mac-reset-bit-mask = <CP110_PCIEx_MAC_RESET_BIT_MASK(2)>;
 		status = "disabled";
 	};
 };
diff --git a/drivers/pci/controller/dwc/pcie-armada8k.c b/drivers/pci/controller/dwc/pcie-armada8k.c
old mode 100644
new mode 100755
index 49596547e..bf39821f5
--- a/drivers/pci/controller/dwc/pcie-armada8k.c
+++ b/drivers/pci/controller/dwc/pcie-armada8k.c
@@ -22,17 +22,23 @@
 #include <linux/resource.h>
 #include <linux/of_pci.h>
 #include <linux/of_irq.h>
+#include <linux/mfd/syscon.h>
+#include <linux/regmap.h>
 
 #include "pcie-designware.h"
-
-#define ARMADA8K_PCIE_MAX_LANES PCIE_LNK_X4
+#include <linux/of_gpio.h>
 
 struct armada8k_pcie {
+#define MV_A8K_PCIE_MAX_WIDTH		4
 	struct dw_pcie *pci;
 	struct clk *clk;
-	struct clk *clk_reg;
-	struct phy *phy[ARMADA8K_PCIE_MAX_LANES];
-	unsigned int phy_count;
+	struct gpio_desc	*reset_gpio;
+	struct regmap *sysctrl_base;
+	u32 mac_rest_bitmask;
+	struct work_struct recover_link_work;
+	enum of_gpio_flags	flags;
+	int phy_count;
+	struct phy *comphy[MV_A8K_PCIE_MAX_WIDTH];
 };
 
 #define PCIE_VENDOR_REGS_OFFSET		0x8000
@@ -54,12 +60,16 @@ struct armada8k_pcie {
 #define PCIE_INT_C_ASSERT_MASK		BIT(11)
 #define PCIE_INT_D_ASSERT_MASK		BIT(12)
 
+#define PCIE_GLOBAL_INT_CAUSE2_REG	(PCIE_VENDOR_REGS_OFFSET + 0x24)
+#define PCIE_GLOBAL_INT_MASK2_REG	(PCIE_VENDOR_REGS_OFFSET + 0x28)
+#define PCIE_INT2_PHY_RST_LINK_DOWN	BIT(1)
+
 #define PCIE_ARCACHE_TRC_REG		(PCIE_VENDOR_REGS_OFFSET + 0x50)
 #define PCIE_AWCACHE_TRC_REG		(PCIE_VENDOR_REGS_OFFSET + 0x54)
 #define PCIE_ARUSER_REG			(PCIE_VENDOR_REGS_OFFSET + 0x5C)
 #define PCIE_AWUSER_REG			(PCIE_VENDOR_REGS_OFFSET + 0x60)
 /*
- * AR/AW Cache defaults: Normal memory, Write-Back, Read / Write
+ * AR/AW Cache defauls: Normal memory, Write-Back, Read / Write
  * allocate
  */
 #define ARCACHE_DEFAULT_VALUE		0x3511
@@ -69,76 +79,19 @@ struct armada8k_pcie {
 #define AX_USER_DOMAIN_MASK		0x3
 #define AX_USER_DOMAIN_SHIFT		4
 
-#define to_armada8k_pcie(x)	dev_get_drvdata((x)->dev)
-
-static void armada8k_pcie_disable_phys(struct armada8k_pcie *pcie)
-{
-	int i;
-
-	for (i = 0; i < ARMADA8K_PCIE_MAX_LANES; i++) {
-		phy_power_off(pcie->phy[i]);
-		phy_exit(pcie->phy[i]);
-	}
-}
+#define PCIE_STREAM_ID			(PCIE_VENDOR_REGS_OFFSET + 0x64)
+#define STREAM_ID_BUS_BITS		2
+#define STREAM_ID_DEV_BITS		2
+#define STREAM_ID_FUNC_BITS		3
+#define STREAM_ID_PREFIX		0x80
+#define PCIE_STREAM_ID_CFG		(STREAM_ID_PREFIX << 12 | \
+					STREAM_ID_BUS_BITS << 8 | \
+					STREAM_ID_DEV_BITS << 4 | \
+					STREAM_ID_FUNC_BITS)
 
-static int armada8k_pcie_enable_phys(struct armada8k_pcie *pcie)
-{
-	int ret;
-	int i;
-
-	for (i = 0; i < ARMADA8K_PCIE_MAX_LANES; i++) {
-		ret = phy_init(pcie->phy[i]);
-		if (ret)
-			return ret;
+#define UNIT_SOFT_RESET_CONFIG_REG	0x268
 
-		ret = phy_set_mode_ext(pcie->phy[i], PHY_MODE_PCIE,
-				       pcie->phy_count);
-		if (ret) {
-			phy_exit(pcie->phy[i]);
-			return ret;
-		}
-
-		ret = phy_power_on(pcie->phy[i]);
-		if (ret) {
-			phy_exit(pcie->phy[i]);
-			return ret;
-		}
-	}
-
-	return 0;
-}
-
-static int armada8k_pcie_setup_phys(struct armada8k_pcie *pcie)
-{
-	struct dw_pcie *pci = pcie->pci;
-	struct device *dev = pci->dev;
-	struct device_node *node = dev->of_node;
-	int ret = 0;
-	int i;
-
-	for (i = 0; i < ARMADA8K_PCIE_MAX_LANES; i++) {
-		pcie->phy[i] = devm_of_phy_get_by_index(dev, node, i);
-		if (IS_ERR(pcie->phy[i])) {
-			if (PTR_ERR(pcie->phy[i]) != -ENODEV)
-				return PTR_ERR(pcie->phy[i]);
-
-			pcie->phy[i] = NULL;
-			continue;
-		}
-
-		pcie->phy_count++;
-	}
-
-	/* Old bindings miss the PHY handle, so just warn if there is no PHY */
-	if (!pcie->phy_count)
-		dev_warn(dev, "No available PHY\n");
-
-	ret = armada8k_pcie_enable_phys(pcie);
-	if (ret)
-		dev_err(dev, "Failed to initialize PHY(s) (%d)\n", ret);
-
-	return ret;
-}
+#define to_armada8k_pcie(x)	dev_get_drvdata((x)->dev)
 
 static int armada8k_pcie_link_up(struct dw_pcie *pci)
 {
@@ -159,6 +112,9 @@ static void armada8k_pcie_establish_link(struct armada8k_pcie *pcie)
 	struct dw_pcie *pci = pcie->pci;
 	u32 reg;
 
+	/* Setup Requester-ID to Stream-ID mapping */
+	dw_pcie_writel_dbi(pci, PCIE_STREAM_ID, PCIE_STREAM_ID_CFG);
+
 	if (!dw_pcie_link_up(pci)) {
 		/* Disable LTSSM state machine to enable configuration */
 		reg = dw_pcie_readl_dbi(pci, PCIE_GLOBAL_CONTROL_REG);
@@ -193,6 +149,11 @@ static void armada8k_pcie_establish_link(struct armada8k_pcie *pcie)
 	       PCIE_INT_C_ASSERT_MASK | PCIE_INT_D_ASSERT_MASK;
 	dw_pcie_writel_dbi(pci, PCIE_GLOBAL_INT_MASK1_REG, reg);
 
+	/* Also enable link down interrupts */
+	reg = dw_pcie_readl_dbi(pci, PCIE_GLOBAL_INT_MASK2_REG);
+	reg |= PCIE_INT2_PHY_RST_LINK_DOWN;
+	dw_pcie_writel_dbi(pci, PCIE_GLOBAL_INT_MASK2_REG, reg);
+
 	if (!dw_pcie_link_up(pci)) {
 		/* Configuration done. Start LTSSM */
 		reg = dw_pcie_readl_dbi(pci, PCIE_GLOBAL_CONTROL_REG);
@@ -216,6 +177,71 @@ static int armada8k_pcie_host_init(struct pcie_port *pp)
 	return 0;
 }
 
+/* armada8k_pcie_reset
+ * The function implements the PCIe reset via GPIO.
+ * First, pull down the GPIO used for PCIe reset, and wait 200ms;
+ * Second, set the GPIO output value with setting from DTS, and wait
+ * 200ms for taking effect.
+ * Return: void, always success.
+ */
+static void armada8k_pcie_reset(struct armada8k_pcie *pcie)
+{
+	/* Set the reset gpio to low first */
+	gpiod_direction_output(pcie->reset_gpio, 0);
+	/* After 200ms to reset pcie */
+	mdelay(200);
+	gpiod_direction_output(pcie->reset_gpio,
+			       (pcie->flags & OF_GPIO_ACTIVE_LOW) ? 0 : 1);
+	mdelay(200);
+}
+
+static void armada8k_pcie_recover_link(struct work_struct *ws)
+{
+	struct armada8k_pcie *pcie = container_of(ws, struct armada8k_pcie,
+						  recover_link_work);
+	struct pci_bus *bus = pcie->pci->pp.root_bus;
+	struct pcie_port *pp = &pcie->pci->pp;
+	struct regmap *sysctrl_base = pcie->sysctrl_base;
+	struct pci_dev *root_port;
+	u32 reg;
+
+	root_port = pci_get_slot(bus, 0);
+	if (!root_port) {
+		dev_err(pcie->pci->dev, "failed to get root port\n");
+		return;
+	}
+	pci_lock_rescan_remove();
+	/* remove bus */
+	pci_stop_and_remove_bus_device(root_port);
+
+	/* reset endpoint */
+	if (pcie->reset_gpio)
+		armada8k_pcie_reset(pcie);
+	else
+	/*
+	 * delay is included in reset ep.
+	 * without reset ep delay needed before resetting mac.
+	 */
+		mdelay(5000);
+
+	/* reset mac */
+	regmap_read(sysctrl_base,
+		    UNIT_SOFT_RESET_CONFIG_REG, &reg);
+	reg &= ~pcie->mac_rest_bitmask;
+	regmap_write(sysctrl_base,
+		     UNIT_SOFT_RESET_CONFIG_REG, reg);
+	udelay(1);
+	reg |= pcie->mac_rest_bitmask;
+	regmap_write(sysctrl_base,
+		     UNIT_SOFT_RESET_CONFIG_REG, reg);
+	udelay(1);
+	armada8k_pcie_host_init(pp);
+
+	/* rescan bus */
+	pci_rescan_bus(bus);
+	pci_unlock_rescan_remove();
+}
+
 static irqreturn_t armada8k_pcie_irq_handler(int irq, void *arg)
 {
 	struct armada8k_pcie *pcie = arg;
@@ -230,6 +256,40 @@ static irqreturn_t armada8k_pcie_irq_handler(int irq, void *arg)
 	val = dw_pcie_readl_dbi(pci, PCIE_GLOBAL_INT_CAUSE1_REG);
 	dw_pcie_writel_dbi(pci, PCIE_GLOBAL_INT_CAUSE1_REG, val);
 
+	val = dw_pcie_readl_dbi(pci, PCIE_GLOBAL_INT_CAUSE2_REG);
+
+	if (PCIE_INT2_PHY_RST_LINK_DOWN & val) {
+		u32 reg = dw_pcie_readl_dbi(pci, PCIE_GLOBAL_CONTROL_REG);
+		/*
+		 * The link went down. Disable LTSSM immediately. This
+		 * unlocks the root complex config registers. Downstream
+		 * device accesses will return all-Fs without freezing the
+		 * CPU.
+		 */
+		reg &= ~(PCIE_APP_LTSSM_EN);
+		dw_pcie_writel_dbi(pci, PCIE_GLOBAL_CONTROL_REG, reg);
+		/*
+		 * Mask link down interrupts. They can be re-enabled once
+		 * the link is retrained.
+		 */
+
+		reg = dw_pcie_readl_dbi(pci, PCIE_GLOBAL_INT_MASK2_REG);
+		reg &= ~PCIE_INT2_PHY_RST_LINK_DOWN;
+		dw_pcie_writel_dbi(pci, PCIE_GLOBAL_INT_MASK2_REG, reg);
+		/*
+		 * At this point a worker thread can be triggered to
+		 * initiate a link retrain. If link retrains were
+		 * possible, that is.
+		 */
+
+		if (pcie->sysctrl_base && pcie->mac_rest_bitmask)
+			schedule_work(&pcie->recover_link_work);
+		dev_dbg(pci->dev, "%s: link went down\n", __func__);
+	}
+
+	/* Now clear the second interrupt cause. */
+	dw_pcie_writel_dbi(pci, PCIE_GLOBAL_INT_CAUSE2_REG, val);
+
 	return IRQ_HANDLED;
 }
 
@@ -245,6 +305,7 @@ static int armada8k_add_pcie_port(struct armada8k_pcie *pcie,
 	struct device *dev = &pdev->dev;
 	int ret;
 
+	pp->root_bus_nr = -1;
 	pp->ops = &armada8k_pcie_host_ops;
 
 	pp->irq = platform_get_irq(pdev, 0);
@@ -273,12 +334,82 @@ static const struct dw_pcie_ops dw_pcie_ops = {
 	.link_up = armada8k_pcie_link_up,
 };
 
+static int armada8k_phy_config(struct platform_device *pdev,
+			       struct armada8k_pcie *pcie)
+{
+	struct phy *comphy;
+	int err;
+	int i;
+
+	pcie->phy_count = of_count_phandle_with_args(pdev->dev.of_node, "phys",
+					       "#phy-cells");
+	if (pcie->phy_count <= 0)
+		return 0;
+
+	for (i = 0; i < pcie->phy_count; i++) {
+		comphy = devm_of_phy_get_by_index(&pdev->dev,
+						  pdev->dev.of_node, i);
+		if (IS_ERR(comphy)) {
+			dev_err(&pdev->dev, "Failed to get phy %d\n", i);
+			return PTR_ERR(comphy);
+		}
+
+		pcie->comphy[i] = comphy;
+
+		switch (pcie->phy_count) {
+		case PCIE_LNK_X1:
+		case PCIE_LNK_X2:
+		case PCIE_LNK_X4:
+			phy_set_bus_width(comphy, pcie->phy_count);
+			break;
+		default:
+			dev_err(&pdev->dev, "wrong pcie width %d",
+				pcie->phy_count);
+			return -EINVAL;
+		}
+
+		err = phy_set_mode(comphy, PHY_MODE_PCIE);
+		if (err) {
+			dev_err(&pdev->dev, "failed to set comphy\n");
+			return err;
+		}
+
+		err = phy_init(comphy);
+		if (err < 0) {
+			dev_err(&pdev->dev, "phy init failed %d",
+				pcie->phy_count);
+			return err;
+		}
+
+		err = phy_power_on(comphy);
+		if (err < 0) {
+			dev_err(&pdev->dev, "phy init failed %d",
+				pcie->phy_count);
+			phy_exit(comphy);
+			return err;
+		}
+	}
+
+	return err;
+}
+
+static void armada8k_phy_deconfig(struct armada8k_pcie *pcie)
+{
+	int i;
+
+	for (i = 0; i < pcie->phy_count; i++) {
+		phy_power_off(pcie->comphy[i]);
+		phy_exit(pcie->comphy[i]);
+	}
+}
+
 static int armada8k_pcie_probe(struct platform_device *pdev)
 {
 	struct dw_pcie *pci;
 	struct armada8k_pcie *pcie;
 	struct device *dev = &pdev->dev;
 	struct resource *base;
+	int reset_gpio;
 	int ret;
 
 	pcie = devm_kzalloc(dev, sizeof(*pcie), GFP_KERNEL);
@@ -291,9 +422,10 @@ static int armada8k_pcie_probe(struct platform_device *pdev)
 
 	pci->dev = dev;
 	pci->ops = &dw_pcie_ops;
-
 	pcie->pci = pci;
 
+	INIT_WORK(&pcie->recover_link_work, armada8k_pcie_recover_link);
+
 	pcie->clk = devm_clk_get(dev, NULL);
 	if (IS_ERR(pcie->clk))
 		return PTR_ERR(pcie->clk);
@@ -302,48 +434,79 @@ static int armada8k_pcie_probe(struct platform_device *pdev)
 	if (ret)
 		return ret;
 
-	pcie->clk_reg = devm_clk_get(dev, "reg");
-	if (pcie->clk_reg == ERR_PTR(-EPROBE_DEFER)) {
-		ret = -EPROBE_DEFER;
-		goto fail;
-	}
-	if (!IS_ERR(pcie->clk_reg)) {
-		ret = clk_prepare_enable(pcie->clk_reg);
-		if (ret)
-			goto fail_clkreg;
-	}
-
 	/* Get the dw-pcie unit configuration/control registers base. */
 	base = platform_get_resource_byname(pdev, IORESOURCE_MEM, "ctrl");
 	pci->dbi_base = devm_pci_remap_cfg_resource(dev, base);
 	if (IS_ERR(pci->dbi_base)) {
 		dev_err(dev, "couldn't remap regs base %p\n", base);
 		ret = PTR_ERR(pci->dbi_base);
-		goto fail_clkreg;
+		goto fail;
 	}
 
-	ret = armada8k_pcie_setup_phys(pcie);
-	if (ret)
-		goto fail_clkreg;
+	/* Config reset gpio for pcie if the reset connected to gpio */
+	reset_gpio = of_get_named_gpio_flags(pdev->dev.of_node,
+					     "reset-gpio", 0,
+					     &pcie->flags);
+	if (gpio_is_valid(reset_gpio)) {
+		pcie->reset_gpio = gpio_to_desc(reset_gpio);
+		armada8k_pcie_reset(pcie);
+	}
+
+	pcie->sysctrl_base =
+		syscon_regmap_lookup_by_phandle(pdev->dev.of_node,
+						"marvell,system-controller");
+
+	ret = of_property_read_u32(pdev->dev.of_node,
+				   "mac-reset-bit-mask",
+				   &pcie->mac_rest_bitmask);
+	if (ret < 0) {
+		dev_err(dev, "couldn't find mac reset bit mask: %d\n", ret);
+		pcie->mac_rest_bitmask = 0x0;
+	}
+
+	ret = armada8k_phy_config(pdev, pcie);
+	if (ret < 0) {
+		dev_err(dev, "PHYs config failed: %d\n", ret);
+		goto fail;
+	}
 
 	platform_set_drvdata(pdev, pcie);
 
 	ret = armada8k_add_pcie_port(pcie, pdev);
 	if (ret)
-		goto disable_phy;
+		goto fail_phy;
 
 	return 0;
 
-disable_phy:
-	armada8k_pcie_disable_phys(pcie);
-fail_clkreg:
-	clk_disable_unprepare(pcie->clk_reg);
+fail_phy:
+	armada8k_phy_deconfig(pcie);
 fail:
-	clk_disable_unprepare(pcie->clk);
+	if (!IS_ERR(pcie->clk))
+		clk_disable_unprepare(pcie->clk);
 
 	return ret;
 }
 
+static int armada8k_pcie_remove(struct platform_device *pdev)
+{
+	struct armada8k_pcie *pcie = platform_get_drvdata(pdev);
+	struct dw_pcie *pci = pcie->pci;
+	struct device *dev = &pdev->dev;
+
+	cancel_work_sync(&pcie->recover_link_work);
+
+	dw_pcie_host_deinit(&pci->pp);
+
+	armada8k_phy_deconfig(pcie);
+
+	if (!IS_ERR(pcie->clk))
+		clk_disable_unprepare(pcie->clk);
+
+	dev_dbg(dev, "%s\n", __func__);
+
+	return 0;
+}
+
 static const struct of_device_id armada8k_pcie_of_match[] = {
 	{ .compatible = "marvell,armada8k-pcie", },
 	{},
@@ -351,10 +514,10 @@ static const struct of_device_id armada8k_pcie_of_match[] = {
 
 static struct platform_driver armada8k_pcie_driver = {
 	.probe		= armada8k_pcie_probe,
+	.remove		= armada8k_pcie_remove,
 	.driver = {
 		.name	= "armada8k-pcie",
 		.of_match_table = of_match_ptr(armada8k_pcie_of_match),
-		.suppress_bind_attrs = true,
 	},
 };
 builtin_platform_driver(armada8k_pcie_driver);
-- 
2.17.1

